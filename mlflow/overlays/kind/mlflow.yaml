apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-configmap
  namespace: mlflow
  labels:
    app: mlflow
data:
  MLFLOW_S3_ENDPOINT_URL: http://mlflow-minio-service.mlflow.svc.cluster.local:9000
  AWS_ACCESS_KEY_ID: minio
  AWS_SECRET_ACCESS_KEY: minio123
---
# Used from Basic Auth: admin:password
apiVersion: v1
data:
  auth: YWRtaW46JGFwcjEkODdYNk9JZXIkay9FYlBlM2hVWGtJTUplN2lMUk1jMAo=
kind: Secret
metadata:
  name: basic-auth
  namespace: mlflow
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlflow
  labels:
    app: mlflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      initContainers:
      - name: create-bucket
        image: minio/mc:latest
        imagePullPolicy: IfNotPresent
        command: [ "/bin/sh","-c" ]
        args: ["/usr/bin/mc config host add s3 $(MLFLOW_S3_ENDPOINT_URL) $(AWS_ACCESS_KEY_ID) $(AWS_SECRET_ACCESS_KEY) --api S3v4; [[ ! -z `/usr/bin/mc ls s3 | grep mlflow` ]] || /usr/bin/mc mb s3/mlflow"]
        envFrom:
          - configMapRef:
              name: mlflow-configmap
      containers:
      - name: mlflow
        image: wbassler/mlflow-tracking:0.0.1
        imagePullPolicy: IfNotPresent
        args:
        - server
        - --host=0.0.0.0
        - --port=5000
        - --backend-store-uri=postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@mlflow-postgres-service.mlflow.svc.cluster.local:5432/$(POSTGRES_DB)
        - --default-artifact-root=s3://mlflow/
        - --workers=2
        envFrom:
          - configMapRef:
              name: mlflow-postgres-configmap
          - configMapRef:
              name: mlflow-minio-configmap
          - configMapRef:
              name: mlflow-configmap
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-service
  namespace: mlflow
  labels:
    app: mlflow
spec:
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: http
  selector:
    app: mlflow
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-ingress
  namespace: mlflow
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # https://kubernetes.github.io/ingress-nginx/examples/auth/basic/
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  rules:
  - host: mlflow
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-service
            port:
              number: 5000

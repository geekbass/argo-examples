apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-mlpipeline-template
  namespace: argo
spec:
  arguments:
    parameters:
    - name: repo
      value: https://github.com/geekbass/argo-examples
    - name: branch
      value: main
    - name: registry
      value: wbassler/argo-example
    - name: version
      value: dev-0.0.1
    - name: namespace
      value: mlops-test
    - name: deployment
      value: mlgateway
    # Internal endpoint of the app endpoint for testing
    - name: service_endpoint
      value: "http://mlgateway.mlops-test.svc.cluster.local/predict"
    - name: mlflow_tracking_uri
      value: "http://mlflow-service.mlflow.svc.cluster.local:5000"
    - name: mlflow_artifact_uri
      value: "http://mlflow-minio-service.mlflow.svc.cluster.local:9000"
      # http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv
    - name: csv_url
      value: "wine_data.csv"
    - name: experiment_name
      value: "wine-quality"
  entrypoint: mlpipeline-template
  # We use a volume claim template so that we can have a shared workspace.
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 64Mi
  templates:
    - name: mlpipeline-template
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: processing
            template: processing
            dependencies:
              - clone
          - name: train
            template: train
            arguments:
              parameters:
                - name: csv_url
                  value: "{{workflow.parameters.csv_url}}"
                - name: experiment_name
                  value: "{{workflow.parameters.experiment_name}}"
                - name: mlflow_tracking_uri
                  value: "{{workflow.parameters.mlflow_tracking_uri}}"
                - name: mlflow_artifact_uri
                  value: "{{workflow.parameters.mlflow_artifact_uri}}"
            dependencies:
              - processing
          - name: promote
            template: promote
            arguments:
              parameters:
                - name: mlflow_tracking_uri
                  value: "{{workflow.parameters.mlflow_tracking_uri}}"
                - name: mlflow_artifact_uri
                  value: "{{workflow.parameters.mlflow_artifact_uri}}"
            dependencies:
              - train
          - name: build
            template: build
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: version
                  value: "{{workflow.parameters.version}}"
            dependencies:
              - promote
          # - name: update-tests
          # Deploy via K8s Manifests using ArgoCD
          - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
                - name: namespace
                  value: "{{workflow.parameters.namespace}}"
            dependencies:
              - build
          - name: ready-check
            template: ready-check
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.parameters.namespace}}"
                - name: deployment
                  value: "{{workflow.parameters.deployment}}"
            dependencies:
              - deploy
          - name: tests
            template: tests
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: version
                  value: "{{workflow.parameters.version}}"
                - name: service_endpoint
                  value: "{{workflow.parameters.service_endpoint}}"
            dependencies:
              - ready-check
          - name: predict
            template: predict
            arguments:
              parameters:
                - name: service_endpoint
                  value: "{{workflow.parameters.service_endpoint}}"
            dependencies:
              - tests
    - name: clone
      inputs:
        parameters:
          - name: repo
          - name: branch
      container:
        volumeMounts:
          - mountPath: /work
            name: work
        image: alpine/git:v2.30.1
        workingDir: /work
        # Do a shallow clone, which is the fastest way to clone, by using the
        # --depth, --branch, and --single-branch options
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .
    - name: processing
      container:
        image: wbassler/mlflow-utils:0.0.1
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/
        command:
          - python
        args:
          - /work/mlflow/processing.py
    - name: train
      inputs:
        parameters:
          - name: csv_url
          - name: experiment_name
          - name: mlflow_tracking_uri
          - name: mlflow_artifact_uri
      container:
        image: wbassler/mlflow-utils:0.0.1
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/
        env:
          - name: CSV_URL
            value: "{{inputs.parameters.csv_url}}"
          - name: EXPERIMENT_NAME
            value: "{{inputs.parameters.experiment_name}}"
          - name: MLFLOW_TRACKING_URI
            value: "{{inputs.parameters.mlflow_tracking_uri}}"
          - name: MLFLOW_ARTIFACT_URI
            value: "{{inputs.parameters.mlflow_artifact_uri}}"
        command:
          - python
        args:
          - /work/mlflow/train.py
    - name: promote
      inputs:
        parameters:
          - name: mlflow_tracking_uri
          - name: mlflow_artifact_uri
      container:
        image: wbassler/mlflow-utils:0.0.1
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/
        env:
          - name: MLFLOW_TRACKING_URI
            value: "{{inputs.parameters.mlflow_tracking_uri}}"
          - name: MLFLOW_ARTIFACT_URI
            value: "{{inputs.parameters.mlflow_artifact_uri}}"
        command:
          - python
        args:
          - /work/mlflow/promote.py
    - name: build
      inputs:
        parameters:
          - name: registry
          - name: version
      volumes:
        - name: docker-config
          secret:
            secretName: docker-config
      container:
        image: moby/buildkit:v0.8.2-rootless
        volumeMounts:
          - name: work
            mountPath: /work
          - name: docker-config
            mountPath: /.docker
        workingDir: /work/
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /.docker
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name=docker.io/{{inputs.parameters.registry}}:{{inputs.parameters.version}},push=true
    - name: deploy
      inputs:
        parameters:
          - name: repo
          - name: branch
          - name: namespace
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: mlgateway-test-application
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: testing
            source:
              repoURL: '{{inputs.parameters.repo}}'
              targetRevision: '{{inputs.parameters.branch}}'
              path: ml-app/overlays/test
            destination:
              server: https://kubernetes.default.svc
              namespace: '{{inputs.parameters.namespace}}'
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: true
              syncOptions:
              - Validate=true
              - CreateNamespace=true
              - PrunePropagationPolicy=foreground
              - PruneLast=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
    - name: ready-check
      inputs:
        parameters:
          - name: namespace
          - name: deployment
      container:
        image: wbassler/pykube-test:0.0.3
        env:
          - name: DEPLOYMENT_NAME
            value: "{{inputs.parameters.deployment}}"
          - name: NAMESPACE_NAME
            value: "{{inputs.parameters.namespace}}"
        command:
          - python
        args:
          - /opt/code/src/deployment_status.py
    - name: tests
      inputs:
        parameters:
          - name: version
          - name: registry
          - name: service_endpoint
      container:
        image: "{{inputs.parameters.registry}}:{{inputs.parameters.version}}"
        env:
          - name: SERVICE_ENDPOINT
            value: "{{inputs.parameters.service_endpoint}}"
          - name: VERSION
            value: "{{inputs.parameters.version}}"
        command:
          - python
        args:
          - /opt/code/tests/response_test.py
    - name: predict
      inputs:
        parameters:
          - name: service_endpoint
      container:
        image: wbassler/mlflow-utils:0.0.1
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/
        env:
          - name: SERVICE_ENDPOINT
            value: "{{inputs.parameters.service_endpoint}}"
        command:
          - python
        args:
            - /work/mlflow/predict.py
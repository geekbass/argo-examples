# SUMMARY:
#
# Build and push an image using Docker Buildkit based on Argo Example:
# https://raw.githubusercontent.com/argoproj/argo-workflows/master/examples/buildkit-template.yaml
#
# DESCRIPTION:
#
# This does not need privileged access, unlike Docker in Docker (DIND). It has three stages:
#
# * clone the Git repository
# * build the binary
# * build and push the image containing the binary
#
# USAGE:
#
# Publishing images requires an access token. For hub.docker.com you can create one at https://hub.docker.com/settings/security
# This needs to be mounted as `$DOCKER_CONFIG/config.json`. To do this, you'll need to create a secret as follows:
#
#    export DOCKER_USERNAME=******
#    export DOCKER_TOKEN=******
#    kubectl create secret -n argo generic docker-config --from-literal="config.json={\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$(echo -n $DOCKER_USERNAME:$DOCKER_TOKEN|base64)\"}}}"
#
# REFERENCES:
#
# * https://github.com/moby/buildkit#expose-buildkit-as-a-tcp-service
# * https://blog.alexellis.io/building-containers-without-docker/
# * https://hub.docker.com/r/moby/buildkit
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-template-mlpipeline-template
  namespace: argo
spec:
  arguments:
    parameters:
    - name: repo
      value: https://github.com/geekbass/argo-examples
    - name: branch
      value: main
    - name: registry
      value: wbassler/argo-example
    - name: version
      value: dev-0.0.1
    - name: namespace
      value: mlops-test
    - name: deployment
      value: mlgateway
    # Internal endpoint of the app endpoint for testing
    - name: service-endpoint
      value: "http://mlgateway.mlops-test.svc.cluster.local/ml/audit"
  entrypoint: mlpipeline-template
  # We use a volume claim template so that we can have a shared workspace.
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 64Mi
  templates:
    - name: mlpipeline-template
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: build
            template: build
            arguments:
              parameters:
                - name: image
                  value: "{{workflow.parameters.registry}}"
                - name: image
                  value: "{{workflow.parameters.version}}"
            dependencies:
              - clone
          # - name: update-tests
          # Deploy via K8s Manifests using ArgoCD
          - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
            dependencies:
              - build
          - name: create-role
            template: create-role
            dependencies:
              - deploy
          - name: ready-check
            template: ready-check
            arguments:
              parameters:
                - name: namespace
                  value: "{{workflow.parameters.namespace}}"
                - name: deployment
                  value: "{{workflow.parameters.deployment}}"
            dependencies:
              - create-role
          - name: tests
            template: tests
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.registry}}"
                - name: version
                  value: "{{workflow.parameters.version}}"
            dependencies:
              - ready-check
          # If tests are successful, destroy. For now if fail leave deployed for troubleshooting.
          #- name: destroy
          #- name: update-prod
          #- name: push-branch
    - name: clone
      inputs:
        parameters:
          - name: repo
          - name: branch
      container:
        volumeMounts:
          - mountPath: /work
            name: work
        image: alpine/git:v2.30.1
        workingDir: /work
        # Do a shallow clone, which is the fastest way to clone, by using the
        # --depth, --branch, and --single-branch options
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .
    - name: build
      inputs:
        parameters:
          - name: image
      # Mount the configuration so we can push the image.
      # This should create the /.docker/config.json file.
      volumes:
        - name: docker-config
          secret:
            secretName: docker-config
      container:
        image: moby/buildkit:v0.8.2-rootless
        volumeMounts:
          - name: work
            mountPath: /work
          - name: docker-config
            mountPath: /.docker
        workingDir: /work/
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /.docker
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name=docker.io/{{inputs.parameters.registry}}:{{inputs.parameters.version}},push=true
    - name: deploy
      inputs:
        parameters:
          - name: repo
          - name: branch
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: mlgateway-test-application
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: testing
            source:
              repoURL: '{{inputs.parameters.repo}}'
              targetRevision: '{{inputs.parameters.branch}}'
              path: ml-app/overlays/test
              directory:
                recurse: true
            destination:
              server: https://kubernetes.default.svc
              namespace: mlops-test
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: true
              syncOptions:
              - Validate=true
              - CreateNamespace=true
              - PrunePropagationPolicy=foreground
              - PruneLast=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
    - name: create-role
      resource:
        action: create
        manifest: |
          # Hack: Used to give ArgoWorkflow the ability to check the deployment status in ready-check step
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: argo-deployment-status-cluster-role
          rules:
          - apiGroups:
            - apps
            resources:
            - deployments/status
            verbs:
            - get
            - list
            - watch
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: argo-deployment-status-cluster-rolebinding
            namespace: mlops-test
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: argo-deployment-status-cluster-role
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: argo
    - name: ready-check
      inputs:
        parameters:
          - name: namespace
          - name: deployment
      container:
        image: wbassler/pykube-test:0.0.3
        env:
          - name: DEPLOYMENT_NAME
            value: "{{inputs.parameters.deployment}}"
          - name: NAMESPACE_NAME
            value: "{{inputs.parameters.namespace}}"
        command:
          - python
        args:
          - /opt/code/src/deployment_status.py
    - name: tests
      inputs:
        parameters:
          - name: image
      container:
        image: "{{inputs.parameters.image}}"
        env:
          - name: SERVICE_ENDPOINT
            value: "{{inputs.parameters.service-endpoint}}"
          - name: VERSION
            value: "{{inputs.parameters.version}}"
        command:
          - python
        args:
          - /opt/code/tests/response_test.py